		device	zxspectrum128


		org	#6000

@ENTRY
levels		incbin	"../levels/levels.bin"
gameplan	incbin	"../gfx/plan.pak"


		org	#8000

C_BG_BRIGHT	equ	1
C_BG_PAPER	equ	7
C_BG_INK	equ	0
C_BG_ATTR	equ	C_BG_PAPER*8+C_BG_PAPER

PLAYFIELD_W	equ	8
PLAYFIELD_H	equ	10
STEP_COUNT_SIZE	equ	4
PLAYFIELD_SIZE	equ	96
COLOR_KEYS_PTR	equ	#5822

UNDO_LEVELS	equ	5
LEVEL_CNT	equ	80


start:		di
		ld	sp,start
		ld	a,C_BG_PAPER
		out	(254),a
		call	prepare_info_screen
		call	setup_im2
main_start	call	play

		ld	a,(level+1)
		ld	(tmplevel+1),a
select_level2
maxlevel	ld	a,0
		ld	b,a
		ld	a,(level+1)
		cp	b
		jr	c,.max
		ld	(maxlevel+1),a
.max		; b=currentlevel c=maxlevel
		ld	a,C_BG_ATTR
		call	cls

		ld	e,0
.loop		push	de

		ld	a,e
		ld	c,a	;store level
		ld	hl,txt_nrlevel
		call	level2text

		ld	a,c	;restore level
		call	calc_hl
		add	hl,hl
		add	hl,hl
		add	hl,hl	;*8
		ld	b,h
		ld	c,0
		add	hl,hl	;*16
		add	hl,bc	;*24
		ld	bc,#2512
		add	hl,bc

		ld	b,l		;top
		ld	c,h		;left
		ld	a,16		;width
		ld	hl,txt_nrlevel
		call	print_text_centered

		pop	de

		call	highlight_level
		inc	e
		ld	a,e
		cp	LEVEL_CNT
		jr	c,.loop
level_select	call	get_controls
		jr	z,level_select
		cp	K_BREAK
		jr	z,level_continue
		cp	K_EDIT
		jr	z,level_continue
		cp	K_FIRE
		jr	z,level_play
		cp	K_LEFT
		jr	z,level_down
		cp	K_DOWN
		jr	z,level_pgup
		cp	K_UP
		jr	z,level_pgdown
		cp	K_RIGHT
		jr	nz,level_select

level_up	ld	a,(maxlevel+1)
		ld	e,a
		ld	a,(level+1)
		cp	e
		jr	nc,level_select
		ld	e,a
		inc	a
		jr	level_set

level_down	ld	a,(level+1)
		or	a
		jr	z,level_select
		ld	e,a
		dec	a
		jr	level_set

level_pgup	ld	a,(maxlevel+1)
		ld	e,a
		ld	a,(level+1)
		add	a,7
		cp	e
		jr	nc,level_select
		ld	a,(level+1)
		ld	e,a
		add	a,8
		jr	level_set

level_pgdown	ld	a,(level+1)
		cp	8
		jr	c,level_select
		ld	e,a
		sub	8
		jr	level_set

level_set	ld	(level+1),a
		call	highlight_level
		ld	a,(level+1)
		ld	e,a
		call	highlight_level
		call	key_delay
		jr	level_select
		ret

level_play	ld	a,(tmplevel+1)
		ld	e,a
		ld	a,(level+1)
		cp	e
		jp	nz,main_start

level_continue	ld	a,(tmplevel+1)
		cp	255
		jp	z,main_start
		ld	(level+1),a
		jp	main_start

calc_hl		ld	hl,#00FF
.loop		sub	8
		inc	l
		jr	nc,.loop
		add	a,8
		ld	h,a
		ret

highlight_level
		ld	a,(maxlevel+1)
		cp	e
		ld	d,5+7*8
		jr	c,.next
		ld	a,(level+1)
		cp	e
		ld	d,2+7*8
		jr	z,.next
		ld	d,0+7*8
.next		ld	a,e
		call	calc_hl

		ld	b,h
		ld	c,0
		add	hl,hl	;*2
		add	hl,bc
		ld	bc,#0400
		add	hl,bc
		ld	c,h
		ld	b,0
		ld	h,b

		add	hl,hl
		add	hl,hl
		add	hl,hl
		add	hl,hl
		add	hl,hl
		add	hl,bc
		ld	bc,22528+64
		add	hl,bc

		ld	(hl),d
		inc	hl
		ld	(hl),d
		inc	hl
		ld	(hl),d
		ld	bc,32-2
		add	hl,bc

		ld	(hl),d
		inc	hl
		ld	(hl),d
		inc	hl
		ld	(hl),d
		ret

cls		ld	hl,#4000
		ld	de,#4001
		ld	bc,#1800
		ld	(hl),l
		ldir
		ld	(hl),a
		ld	bc,#2FF
		ldir
		ret

play		ld	a,C_BG_PAPER
		out	(254),a

		ld	hl,gameplan
		ld	de,#4000
		call	unpack

start_level
.nokey		xor	a
		in	a,(254)
		cpl
		and	31
		jr	nz,.nokey
		halt

level		ld	a,0
tmplevel	cp	255
		jr	z,.tmp

		;load level and print it to the screen
		call	prepare_level
		jr	.playground

.tmp		ld	a,255
		ld	(tmplevel+1),a
		call	prepare_level.justdraw

.playground	ld	a,(level+1)	;level
		ld	hl,txt_nrlevel
		call	level2text

		ld	b,6		;top
		ld	c,256-32	;left
		ld	a,32		;width
		ld	hl,txt_nrlevel
		call	print_text_centered

		ld	b,18		;top
		ld	c,256-32	;left
		ld	a,32		;width
		ld	hl,txt_level
		call	print_text_centered

mainloop	call	get_controls
		cp	K_LEFT
		jr	c,mainloop
		cp	K_UP + 1
		jp	c,perform_move

		cp	K_FIRE		;change color
		jr	z,change_color

		cp	'c'		;level code
		jp	z,entercode

		cp	'm'		;music off/on
		jr	z,manage_music

		cp	'i'		;info
		jp	z,info_screen

		cp	'u'		;undo
		jr	z,perform_undo

		cp	'l'		;select level
		ret	z

		cp	'r'		;reload
		jp	z,start_level

		cp	'1'
		jr	c,mainloop_cont
		cp	'5'
		jr	nc,mainloop_cont

		sub	'1'
		push	af
		add	a,low playground.steps
		ld	l,a
		ld	h,high playground.steps
		ld	a,(hl)
		or	a
		jr	nz,.setact
		pop	af
		jr	mainloop_cont

.setact		pop	af
		ld	(active_color),a
		call	reset_color_keys

mainloop_cont	call	key_delay
		jr	mainloop

manage_music	call	mute_unmute
		jr	mainloop_cont

perform_undo	call	undo
		jr	mainloop_cont

change_color	ld	a,(active_color)
		inc	a
		and	3
		ld	e,a
		add	a,low playground.steps
		ld	l,a
		ld	h,high playground.steps
		xor	a
		call	findplayablecolor.findnext
		jr	mainloop_cont

undo		ld	a,(undo_area+PLAYFIELD_SIZE-8)
		or	a
		ret	z
		ei
		halt
		ld	hl,undo_area
		ld	de,playground
		ld	bc,PLAYFIELD_SIZE*UNDO_LEVELS
		ld	a,e
		ldir
		ld	d,h
		ld	e,l
		inc	de
		ld	bc,PLAYFIELD_SIZE
		ld	(hl),a
		ldir
		ld	a,(active_color)
		push	af
		call	prepare_level.justdraw
		pop	af
		ld	(active_color),a
		ret

store_undo	push	hl
		push	de
		push	bc
		ld	hl,playground+PLAYFIELD_SIZE*UNDO_LEVELS-1
		ld	de,undo_area+PLAYFIELD_SIZE*UNDO_LEVELS-1
		ld	bc,PLAYFIELD_SIZE*UNDO_LEVELS
		lddr
		pop	bc
		pop	de
		pop	hl
		ret

prepare_level	cp	255
		ret	z
		cp	LEVEL_CNT
		jr	c,.copy2pg

		xor	a
.copy2pg	rlca
		ld	l,a
		ld	h,0
		add	hl,hl
		add	hl,hl
		add	hl,hl
		add	hl,hl
		ld	d,h
		ld	e,l
		add	hl,hl
		add	hl,de
		ld	de,levels
		add	hl,de
		ld	de,playground
		ld	bc,PLAYFIELD_SIZE
		ld	a,e
		ldir
		ld	h,d
		ld	l,e
		inc	de
		ld	bc,PLAYFIELD_SIZE*UNDO_LEVELS
		ld	(hl),a
		ldir

		ld	(redraw_bubbles.color00+1),bc
		ld	(redraw_bubbles.color01+1),bc
		ld	(redraw_bubbles.color10+1),bc
		ld	(redraw_bubbles.color11+1),bc
		dec	bc
		ld	(playground.current_location+0),bc
		ld	(playground.current_location+2),bc
		ld	a,#CC ; call z
		ld	(.firsttime),a

.justdraw	ei
		halt
		ld	de,#4008
		ld	ix,playground
		ld	c,10
.rows		ld	b,8
		push	de
.cols		ld	a,(ix+0)
		or	a
		jr	z,.next
		and	#FC
		cp	4
		push	bc
.firsttime	call	z,.startile
		ld	l,(ix+0)
		ld	h,0
		add	hl,hl
		add	hl,hl
		ld	bc,sprite2fntab
		add	hl,bc
		ld	a,(hl)
		ld	(draw_sprite+1),a
		inc	l
		ld	c,(hl)
		inc	l
		ld	a,(hl)
		inc	l
		ld	h,(hl)
		ld	l,a
		push	de
		call	draw_sprite
		pop	de
		ld	a,(ix+0)
		and	16+128
		cp	16 ; wrapper
		jr	z,.wrapper
		ld	a,(ix+1)
		or	a
		call	z,draw_shade_right
		and	16+128
		cp	16 ; wrapper
		call	z,draw_shade_right
		ld	a,(ix+8)
		or	a
		call	z,draw_shade_bottom
		and	16+128
		cp	16 ; wrapper
		call	z,draw_shade_bottom
		ld	a,(ix+9)
		or	a
		call	z,draw_shade_corner
		and	2+16+128
		cp	16 ; wrapper right|down
		call	z,draw_shade_corner
.wrapper	pop	bc
.next		inc	ix
		inc	e
		inc	e
		djnz	.cols
		pop	de
		call	down2ch
		dec	c
		jr	nz,.rows
		call	redraw_bubbles
		inc	a
		ld	(.firsttime),a
		jp	findplayablecolor

.startile	ld	a,(ix+0)
		and	3
		ld	l,a
		ld	h,0
		ld	c,a
		ld	b,h
		add	hl,hl
		add	hl,hl
		add	hl,hl
		add	hl,bc
		ld	bc,redraw_bubbles.color00+1
		add	hl,bc
		ld	(hl),e
		inc	hl
		ld	(hl),d
		add	a,low playground.current_location
		ld	l,a
		ld	h,high playground.current_location
		ld	a,xl
		ld	(hl),a
		ret

perform_move	rlca
		add	a,low ctrl2direction
		ld	h,high ctrl2direction
		ld	l,a
		jr	nc,.getdir
		inc	h
.getdir		ld	d,(hl)
		inc	hl
		ld	a,(hl)
		ld	(.whatatdir+2),a
		ld	(.wraponedge+1),a
		ld	e,a

		ld	a,(active_color)
		ld	c,a
		add	a,low playground.steps
		ld	l,a
		ld	h,high playground.current_location
		ex	af,af'
		ld	a,(hl)	; check remaining steps
		or	a
		jr	z,.forbidden
		ex	af,af'
		sub	(playground.steps - playground.current_location)
		ld	l,a
		ld	a,(hl)
		ld	xl,a
		ld	xh,high playground
		add	a,e
		ld	l,a
;		ld	h,high playground
		ld	b,(ix+0)
.whatatdir	ld	e,(ix+0)

; ix = position, b = tile at current position,
; c = color, d = direction, e = tile at following position

		xor	a	; reset flags
		ld	(.additional+1),a

		or	e	; is void?
		jr	z,.forbidden

.restartwrap	ld	a,#C0	; is filled or blocked?
		and	e
		jr	nz,.forbidden
		bit	4,e	; is wrapper?
		jr	nz,.wrapper
		bit	5,e	; is powerup?
		jr	nz,.powerup
		ld	a,#0C
		and	e
		cp	4	; is another start tile?
		jr	z,.forbidden
		cp	8	; is color tick?
		jr	z,.colortick
		cp	12	; is arrow?
		jr	z,.dirarrow
		ld	a,e
		dec	a	; is empty tile?
		jr	z,.makemove
		dec	a
		dec	a	; is blocker?
		jr	z,.forbidden
		inc	a	; is switch?
		call	z,.switch

.makemove	ei
		halt
		ld	a,c
		rlca
		rlca
		rlca
		rlca
		ld	e,a	; e = color << 4
		bit	7,b
		jr	z,.firstmove
		ld	a,b	; last tile dir
		and	3
		rlca
		rlca
		or	d	; plus current dir
		push	hl
		ld	h,high dir2tile
		ld	l,a
		ld	a,(hl)	; get target path-tile
		pop	hl
		or	e	; add color << 4
		bit	6,b	; was switch path tile?
		jr	z,.finish
		set	6,a
.finish		ld	(ix+0),a
		ld	a,#86	; mirrored target tile
		xor	d
		or	e	; color << 4
.additional	or	0
		ld	(hl),a
		call	finish_move
.forbidden	call	key_delay
		jp	mainloop

.firstmove	call	store_undo
		ld	a,#84
		or	d
		or	e	; color << 4
		jr	.finish

.colortick	ld	a,e	; follow-tile
		and	3
		cp	c	; color
		jr	nz,.forbidden
		jr	.makemove

.dirarrow	ld	a,e	; follow-tile
		and	3
		cp	d	; direction
		jr	nz,.forbidden
		jr	.makemove

.powerup	push	hl
		ld	a,c	; color
		add	a,low playground.steps
		ld	l,a
		ld	h,high playground.steps
		ld	a,e	; follow-tile
		and	7
		add	a,(hl)	; add to steps
		ld	(hl),a
		pop	hl
		jr	.makemove

.wrapper	ld	a,e	; follow-tile
		and	3
		cp	d	; direction
		jr	nz,.forbidden
		ld	a,d
		rrca
		jr	c,.wrapvert
		rrca
		jr	nc,.wraphoriz
		ld	a,-8
		and	l
		jr	.wrapfind
.wraphoriz	ld	a,7
		or	l
		jr	.wrapfind
.wrapvert	ex	af,af'
		ld	a,7
		and	l
		ld	l,a
		ex	af,af'
		rrca
		jr	c,.wrapfindloop
		ex	af,af'
		or	PLAYFIELD_H << 3
.wrapfind	ld	l,a	; we got furthest opposite edge
.wrapfindloop	ld	e,(hl)
		ld	a,(hl)
		or	a
		jp	nz,.restartwrap
.wraponedge	ld	a,0
		add	a,l
		ld	l,a
		jr	.wrapfindloop

.switch		push	hl
		push	bc
		ld	b,PLAYFIELD_SIZE - 8
		ld	hl,playground
.switchloop	ld	a,(hl)
		and	#C0
		cp	#40	; blocked tile
		jr	nz,.switchnext
		res	6,(hl)
		call	findpos_drawsprite
.switchnext	inc	l
		djnz	.switchloop
		ld	a,#40	; switched path additional flag
		ld	(.additional+1),a
		pop	bc
		pop	hl
		ret

finish_move	ld	e,l
		call	findpos_drawsprite
		ld	a,xl
		ld	l,a
		call	findpos_drawsprite
		ld	a,c
		add	a,low playground.current_location
		ld	l,a
;		ld	h,high playground.current_location
		ld	(hl),e	; update location
		add	a,(playground.steps - playground.current_location)
		ld	l,a
		dec	(hl)	; update steps
		push	hl
		call	redraw_bubbles
		pop	hl
		ld	l,low playground.steps
		ld	a,(hl)
		inc	l
		or	(hl)
		inc	l
		or	(hl)
		inc	l
		or	(hl)
		ret	nz

		ld	l,a
		ld	b,PLAYFIELD_SIZE - 8
.testfield	ld	c,(hl)
		inc	l
		xor	a
		or	c
		jr	z,.testnext
		cp	3
		jr	z,.testnext
		and	16+128
		cp	16	; wrapper
		jr	z,.testnext
		bit	7,c
		ret	z
.testnext	djnz	.testfield

		pop	af ; throw away ret and move to next level
		jp	next_level

findpos_drawsprite
		push	hl
		push	de
		push	bc
		ld	a,l
		call	findpos_a2de

		ld	l,(hl)
		ld	h,a
		add	hl,hl
		add	hl,hl
		ld	bc,sprite2fntab
		add	hl,bc
		ld	a,(hl)
		ld	(draw_sprite+1),a
		inc	l
		ld	c,(hl)
		inc	l
		ld	a,(hl)
		inc	l
		ld	h,(hl)
		ld	l,a
		call	draw_sprite
		pop	bc
		pop	de
		pop	hl
		ret

findpos_a2de	ld	de,#4008
		jr	.start
.loop1		ex	af,af'
		call	down2ch
		ex	af,af'
.start		sub	8
		jr	nc,.loop1
		add	a,8
.loop2		inc	e
		inc	e
		dec	a
		jr	nz,.loop2
		ret

;;-----------------------------------------------------------------------------
draw_base_sprite
		push	de
		ld	b,2
.loop	dup 4
		ld	a,(hl)
		ld	(de),a
		inc	hl
		inc	e
		ld	a,(hl)
		ld	(de),a
		inc	hl
		dec	e
		inc	d
		ld	a,(hl)
		ld	(de),a
		inc	hl
		inc	e
		ld	a,(hl)
		ld	(de),a
		inc	hl
		dec	e
		inc	d
	edup
		org	$-1
		call	downde
		djnz	.loop
		pop	hl
.finish		ld	a,h
		and	#F8
		rrca
		rrca
		rrca
		xor	#50
		ld	h,a
		ld	(hl),c
		inc	l
		ld	(hl),c
		ld	de,#1F
		add	hl,de
		ld	(hl),c
		inc	l
		ld	(hl),c
		ret

draw_tick	ld	a,c
		ex	af,af'
		ld	c,0q170
		call	draw_base_sprite
		ex	af,af'
		ld	(hl),a
		ret

draw_sprite	jr	$+2
		jr	draw_base_sprite
		jr	draw_tick
		jr	draw_wrap
		jr	draw_path
		jr	draw_path_switch
		ret

draw_path_switch
		ld	a,0q170
		and	c
		ld	c,a
		push	bc
		ld	b,h
		ld	c,l
		ld	hl,spr_path_swtch
		push	de
		ld	a,8
.loop		ex	af,af'
		ld	a,(bc)
		and	(hl)
		inc	hl
		or	(hl)
		ld	(de),a
		inc	hl
		inc	bc
		inc	e
		ld	a,(bc)
		and	(hl)
		inc	hl
		or	(hl)
		ld	(de),a
		inc	hl
		inc	bc
		dec	e
		inc	d
		ld	a,(bc)
		and	(hl)
		inc	hl
		or	(hl)
		ld	(de),a
		inc	hl
		inc	bc
		inc	e
		ld	a,(bc)
		and	(hl)
		inc	hl
		or	(hl)
		ld	(de),a
		inc	hl
		inc	bc
		dec	e
		call	downde
		ex	af,af'
		dec	a
		jr	nz,.loop
		pop	hl
		pop	bc
		jr	draw_base_sprite.finish

draw_path	ld	(draw_path.wrap.pix+1),de
		push	bc
		ld	a,0q170
		and	c
		ld	c,a
		call	draw_base_sprite
		ld	(draw_path.wrap+1),hl
		pop	bc
		ld	b,2
		ld	hl,-64
		bit	1,c
		call	nz,draw_path.wrap
		rrc	b
		ld	hl,-2
		bit	0,c
		call	nz,draw_path.wrap
		ret

draw_wrap	srl	c
		jr	nc,.noleft
		ld	hl,spr_wrap.L
		inc	e
		ld	c,2
.wrapL_loop1	ld	b,7
.wrapL_loop2	ld	a,(hl)
		ld	(de),a
		inc	hl
		inc	d
		djnz	.wrapL_loop2
		ld	a,(hl)
		ld	(de),a
		inc	hl
		call	downde
		dec	c
		jr	nz,.wrapL_loop1
		ld	a,(de)
		or	(hl)
		ld	(de),a
		ret

.noleft		srl	c
		jr	nc,.noup
		ld	hl,spr_wrap.U
		ld	c,2
		ld	a,32
		add	a,e
		ld	e,a
		jr	nc,.wrapU_loop1
		ld	a,8
		add	a,d
		ld	d,a
.wrapU_loop1	push	de
		ld	b,7
.wrapU_loop2	ld	a,(hl)
		ld	(de),a
		inc	hl
		inc	d
		djnz	.wrapU_loop2
		ld	a,(hl)
		ld	(de),a
		inc	hl
		pop	de
		inc	e
		dec	c
		jr	nz,.wrapU_loop1
		ld	b,8
.wrapU_loop3	ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		inc	d
		djnz	.wrapU_loop3
		ret

.noup		srl	c
		jr	nc,.noright
		ld	hl,spr_wrap.R
		ld	c,2
		push	de
.wrapR_loop1	ld	b,7
.wrapR_loop2	ld	a,(hl)
		ld	(de),a
		inc	hl
		inc	d
		djnz	.wrapR_loop2
		ld	a,(hl)
		ld	(de),a
		inc	hl
		call	downde
		dec	c
		jr	nz,.wrapR_loop1
		ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		pop	de
		inc	e
		ld	c,2
.wrapR_loop3	ld	b,7
.wrapR_loop4	ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		inc	d
		djnz	.wrapR_loop4
		ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		call	downde
		dec	c
		jr	nz,.wrapR_loop3
		ld	a,(de)
		or	(hl)
		ld	(de),a
		ret

.noright	srl	c
		ret	nc
		ld	hl,spr_wrap.D
		ld	c,2
.wrapD_loop1	push	de
		ld	b,7
.wrapD_loop2	ld	a,(hl)
		ld	(de),a
		inc	hl
		inc	d
		djnz	.wrapD_loop2
		ld	a,(hl)
		ld	(de),a
		inc	hl
		call	downde
		ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		pop	de
		inc	e
		dec	c
		jr	nz,.wrapD_loop1
		ld	b,7
.wrapD_loop3	ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		inc	d
		djnz	.wrapD_loop3
		ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		call	downde
		ld	a,(de)
		or	(hl)
		ld	(de),a
		ret

draw_path.wrap	ld	de,0
		add	hl,de
.pix		ld	de,0
		ld	a,c
		and	b
		bit	1,a
		ld	a,(hl)
		jr	nz,.horiz
		res	0,c
		cp	0q070
		ret	nz
		inc	d
		ld	b,8
.vertical	ld	a,(de)
		or	#80
		ld	(de),a
		call	downde
		ld	a,(de)
		or	#80
		ld	(de),a
		inc	d
		djnz	.vertical
		ret

.horiz		res	1,c
		cp	0q070
		ret	nz
		ld	a,#FF
		ld	(de),a
		inc	e
		ld	(de),a
		ret

draw_shade_right
		push	de
		inc	e
		inc	e
		ld	hl,shade_right
		ld	b,8
.loop		ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		inc	d
		ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		call	downde
		djnz	.loop
		pop	de
		ret

draw_shade_bottom
		push	de
		call	down2ch
		ld	hl,shade_bottom
		ld	b,shade_bottom.length
.loop		ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		inc	e
		ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		dec	e
		call	downde
		djnz	.loop
		pop	de
		ret

draw_shade_corner
		push	de
		inc	e
		inc	e
		call	down2ch
		ld	hl,shade_corner
		ld	b,shade_corner.length
.loop		ld	a,(de)
		or	(hl)
		ld	(de),a
		inc	hl
		inc	d
		djnz	.loop
		pop	de
		ret

redraw_bubbles	ld	a,(playground.steps+0)
.color00	ld	bc,0
		call	.drawbubble
		ld	a,(playground.steps+1)
.color01	ld	bc,0
		call	.drawbubble
		ld	a,(playground.steps+2)
.color10	ld	bc,0
		call	.drawbubble
		ld	a,(playground.steps+3)
.color11	ld	bc,0
.drawbubble	bit	6,b
		ret	z
		and	31
		inc	a
		rlca
		rlca
		ld	l,a
		ld	h,0
		add	hl,hl
		add	hl,hl
		add	hl,hl
		ld	de,spr_num_mask
		add	hl,de
		ld	a,16
.loop		ex	af,af'
		ex	hl,de
		ld	a,(bc)
		and	(hl)
		inc	hl
		ex	hl,de
		or	(hl)
		inc	hl
		ld	(bc),a
		inc	c
		ex	hl,de
		ld	a,(bc)
		and	(hl)
		inc	hl
		ex	hl,de
		or	(hl)
		inc	hl
		ld	(bc),a
		dec	c
		inc	b
		ld	a,b
		and	7
		jr	nz,.next
		ld	a,c
		add	a,32
		ld	c,a
		jr	c,.next
		ld	a,b
		sub	8
		ld	b,a
.next		ex	af,af'
		dec	a
		jr	nz,.loop
		ret

findplayablecolor
		xor	a
		ld	hl,playground.steps
		ld	e,a
.findnext	ld	bc,#0303
.loop		or	(hl)
		jr	nz,.setcolor
		ex	af,af'
		ld	a,l
		inc	a
		ld	l,a
		cp	4 + (low playground.steps)
		jr	c,.nowrap
		ld	l,low playground.steps
.nowrap		ex	af,af'
		djnz	.loop
		or	(hl)
		jr	z,reset_color_keys

.setcolor	ld	a,b
		xor	c
		add	a,e
		and	c
		ld	(active_color),a

reset_color_keys
		ld	a,#38
		ld	hl,COLOR_KEYS_PTR-1
		ld	de,#40
		ld	(hl),a
		add	hl,de
		ld	(hl),a
		add	hl,de
		ld	(hl),a
		add	hl,de
		ld	(hl),a
		ret

;;-----------------------------------------------------------------------------

entercode	call	key_delay
		call	fadeout

		ld	a,C_BG_PAPER*8 + C_BG_INK
		call	cls

		ld	hl,enterlevelcodetxt
		ld	b,12*7
		ld	c,0
		ld	a,0		;width
		call	print_text_centered

		call	fadein

		ld	hl,tmpcode
		ld	(hl),0
		ld	b,8

.loop		push	bc
		push	hl

.getkey		call	get_key
		or	a
		jr	z,.getkey

		cp	13
		jr	z,.end1
		cp	'0'
		jr	c,.getkey
		cp	'f'+1
		jr	nc,.getkey
		cp	'9'+1
		jr	c,.keyok
		cp	'a'
		jr	c,.getkey
		sub	32

.keyok		pop	hl
		ld	(hl),a
		inc	hl
		ld	(hl),0

		push	hl
		ld	hl,tmpcode
		ld	b,12*8
		ld	c,0
		ld	a,0		;width
		call	print_text_centered
		pop	hl

		call	key_delay

		pop	bc
		djnz	.loop

		ld	hl,tmpcode
		ld	de,levelhashtext2
		ld	bc,8
		ldir
		call	get_level_code
		jr	c,.end

		call	decode_level_code
		jr	c,.end
		or	a
		jr	z,.end
		cp	LEVEL_CNT

		jr	nc,.end

		ld	(level+1),a
		ld	c,a
		ld	a,(maxlevel+1)
		cp	c		;entered code
		jr	nc,.nochg_max

		;entered code is bigger than max, so update max
		ld	(maxlevel+1),a

.nochg_max	ld	a,255
		jr	.set

.end1		pop	bc
		pop	hl
.end		ld	a,(level+1)

.set		ld	(tmplevel+1),a

		call	fadeout
		jp	play

key_delay	ld	bc,#0F1F
.loop		halt
		xor	a
		in	a,(31)
		and	c
		jr	z,.tstkeys
		cp	c
		jr	c,.next
.tstkeys	xor	a
		in	a,(254)
		cpl
		and	31
		ret	z
.next		djnz	.loop
		ret

level2text	inc	a
		ld	e,48
.loop		sub	10
		jr	c,.next
		inc	e
		jr	.loop
.next		add	a,58
		ld	d,a
		ld	a,e
		cp	48
		jr	z,.finish
		ld	(hl),e
		inc	hl
.finish		ld	(hl),d
		inc	hl
		ld	(hl),0
		ret

next_level	ld	a,255
		ld	(tmplevel+1),a

		ld	b,50
.waitsec	halt
		djnz	.waitsec

		call	fadeout

		ld	a,(level+1)
		inc	a
		ld	(level+1),a
		cp	LEVEL_CNT
		jr	nc,game_end

		ld	hl,finlevel_text
		ld	a,0		;width
		call	print_text_screen_centered

		call	encode_level_code
		call	translate_level_code

		ld	hl,levelhashtext
		call	get_width

		ld	a,255
		sub	e
		ld	c,a
		ld	b,180
		call	set_position
		ld	hl,levelhashtext
		call	print_text

		call	fadein
.wkey		call	get_controls
		jr	z,.wkey
		jp	play

game_end	xor	a
		ld	(level+1),a
		ld	a,255
		ld	(tmplevel+1),a

		ld	hl,winwin_screen
		ld	de,#4000
		call	unpack

		ld	hl,winwin_text
		ld	b,155
		ld	c,0
		ld	a,0		;width
		call	print_text_centered

.wkey		call	get_controls
		jr	z,.wkey

		call	fadeout
		jp	select_level2

fadeout		push	hl
		ld	d,7
.clrloop	halt
		ld	hl,22528
		ld	bc,768
.scrloop	ld	a,(hl)
		and	63
		ld	e,a
		and	7
		cp	7
		jr	z,.ink
		inc	e
.ink		ld	a,e
		and	56
		cp	56
		jr	z,.paper
		ld	a,e
		add	a,8
		ld	e,a
.paper		ld	(hl),e
		inc	hl
		dec	bc
		ld	a,b
		or	c
		jr	nz,.scrloop

		dec	d
		jr	nz,.clrloop

		ld	a,C_BG_ATTR
		call	cls
		pop	hl
		ret

fadein		push	hl
		ld	d,7
.clrloop	halt
		ld	hl,22528
		ld	bc,768
.scrloop	ld	a,(hl)
		and	7
		jr	z,.max
		dec	(hl)
.max		inc	hl
		dec	bc
		ld	a,b
		or	c
		jr	nz,.scrloop

		dec	d
		jr	nz,.clrloop
		pop	hl
		ret

get_ctrls_loop	call	get_key_core
		ret	nz
get_controls	ld	hl,ctrldefs
		ld	bc,#1F
		in	a,(c)
		and	c
		jr	z,get_ctrls_loop
		cp	c
		jr	z,get_ctrls_loop
		ld	b,5
		ld	hl,kempdefs
.kemploop	rrca
		jr	c,.kempston
		inc	hl
		djnz	.kemploop
.kempston	ld	a,(hl)
		or	a
		ret

get_key		ld	hl,keys
		call	get_key_core
		ret	nz
		jr	get_key

get_key_core	ld	bc,#FEFE
		ld	de,#0804
		in	a,(c)
		cpl
		and	#1F
		rra
		jr	nc,.cols
		ld	hl,keys.caps
.cols		rra
		jr	c,.found
		inc	hl
		dec	e
		jr	nz,.cols
		rrc	b
		dec	d
		ret	z
.rows		in	a,(c)
		cpl
		and	#1F
		ld	e,5
		jr	.cols

.found		ld	a,(hl)
		or	a
		ret

		include "keymap.inc"

kempdefs	db	K_RIGHT, K_LEFT, K_DOWN, K_UP, K_FIRE, 0

;;-----------------------------------------------------------------------------

set_font	ld	(font),hl
		ret
set_position	ld	a,b
		ld	(ycoord),a
		ld	a,c
		ld	(xcoord),a
		ret

get_width	ld	de,0
.loop		ld	a,(hl)
		or	a
		ret	z
		cp	13
		ret	z

		sub	32
		ld	c,a
		ld	b,0
		push	hl
		ld	hl,(font)
		add	hl,bc
		ld	l,(hl)
		ld	h,0
		add	hl,de
		ex	de,hl
		pop	hl
		inc	hl
		jr	.loop

print_text_screen_centered
		push	af
		push	hl

		;calculate left border from width: c=(256-a)/2
		ld	c,a
		xor	a
		sub	c
		srl	a
		ld	c,a

		;calculate number of lines
		ld	b,1
.lines		ld	a,(hl)
		or	a
		jr	z,.done
		cp	13
		jr	nz,.noent
		inc	b
.noent
		inc	hl
		jr	.lines
.done
		;calculate top border from nr of lines: b=(192-12*L)/2
		ld	a,b
		add	a,b	;*2
		add	a,b	;*3
		add	a,a	;*6
		add	a,a	;*12

		ld	b,a
		ld	a,192
		sub	b
		srl	a
		ld	b,a

		pop	hl
		pop	af

print_text_centered
		push	hl
.loop		push	af
		push	bc

		push	hl
		push	bc
		push	af

		call	get_width
		srl	e	;width of text /2

		pop	af
		or	a
		jr	nz,.div
		ld	a,128	;widht 0 means 256, so width/2 = 128
		jr	.nodiv
.div		srl	a	;width of "window" /2
.nodiv		pop	bc

		add	a,c
		sub	e
		ld	c,a
		call	set_position
		pop	hl
		push	hl
		call	print_text
		pop	hl

.getline	ld	a,(hl)
		inc	hl
		or	a
		jr	z,.eol
		cp	13
		jr	nz,.getline
		pop	bc
		ld	a,12
		add	a,b
		ld	b,a
		pop	af
		jr	.loop

.eol		pop	bc
		pop	af
		pop	hl
		ret

print_text	ld	a,(hl)
		or	a
		ret	z
		cp	13
		ret	z

		push	hl
		sub	32
		ld	e,a
		ld	d,0
		ld	hl,(font)
		add	hl,de
		ld	a,(xcoord)
		add	a,(hl)
		jr	nc,.print1

		xor	a
		ld	(xcoord),a

		ld	a,(ycoord)
		add	a,12
		cp	192
		jr	c,.sameln1
		sub	192
.sameln1	ld	(ycoord),a
.print1		pop	hl
		push	hl
		ld	a,(hl)
		call	print_char
		pop	hl
		push	hl

		ld	a,(hl)
		sub	32
		ld	e,a
		ld	d,0
		ld	hl,(font)
		add	hl,de
		ld	a,(xcoord)
		add	a,(hl)
		ld	(xcoord),a
		jr	nc,.print2

		xor	a
		ld	(xcoord),a
		ld	a,(ycoord)
		add	a,12
		cp	192
		jr	c,.sameln2
		sub	192
.sameln2	ld	(ycoord),a
.print2		pop	hl
		inc	hl
		jr	print_text

print_char	sub	32
		ld	e,a
		ld	d,0
		ld	hl,(font)
		add	hl,de
		ld	b,(hl)	;width

		ld	a,b
		or	a
		ret	z	;zero width???

		ld	bc,#ffff
		ld	d,#ff
.rot1		srl	b
		rr	c
		rr	d
		dec	a
		jr	nz,.rot1
		ld	a,(xcoord)
		and	7
		jr	z,.norot

.rot2		scf
		rr	b
		rr	c
		rr	d
		dec	a
		jr	nz,.rot2
.norot		ld	a,d
		ld	(fatfontfix+1),a
		ld	d,0

		;we have character mask in bc
		ld	l,e
		ld	h,d
		add	hl,hl	;*2
		add	hl,de	;*3
		add	hl,hl	;*6
		add	hl,hl	;12
		ld	de,126
		add	hl,de
		ld	de,(font)
		add	hl,de
		;we have font address in hl
		ld	a,(xcoord)
		rrca
		rrca
		rrca
		and	31
		ld	e,a

		ld	a,(ycoord)
		ld	d,a
		rlca
		rlca
		and	#e0
		or	e
		ld	e,a
		ld	a,d
		and	#c7
		ld	d,a
		rrca
		rrca
		rrca
		or	d
		and	31
		or	64
		ld	d,a
		;we have screen address in de

		ld	a,12
print_loop	push	af
		push	hl

		ld	h,(hl)
		ld	l,0

		ld	a,(xcoord)
		and	7
		jr	z,.norot
.rot		srl	h
		rr	l
		dec	a
		jr	nz,.rot
.norot		ld	a,(de)
		and	b
		or	h
		ld	(de),a
		inc	de
		ld	a,(de)
		and	c
		or	l
		ld	(de),a
		inc	de
		ld	a,(de)
fatfontfix	and	0
		ld	(de),a
		dec	de
		dec	de
		call	downde
		pop	hl
		inc	hl
		pop	af
		dec	a
		jr	nz,print_loop
		ret

downde		inc	d
		ld	a,d
		and	7
		ret	nz
		ld	a,e
		add	a,32
		ld	e,a
		ld	a,d
		jr	c,.chkovr
		sub	8
		ld	d,a
		ret
.chkovr		cp	88
		ret	c
		ld	d,64
		ret

down2ch		ld	a,64
		add	a,e
		ld	e,a
		ret	nc
		ld	a,8
		add	a,d
		ld	d,a
		ret

encode_level_code
		ld	ix,levelhash
		ld	d,a

		ld	a,r
		ld	l,a
		ld	h,0
		ld	e,8
		ld	bc,levelhash
.loop1		ld	a,(hl)
		and	15
		ld	(bc),a
		inc	hl
		inc	bc
		dec	e
		jr	nz,.loop1

		ld	hl,levelhashbits
		ld	c,2
.loop2		ld	e,d
		ld	b,7
.loop3		ld	a,(hl)
		and	7
		ld	(.lvlsetres+2),a	;calculate offset

		ld	a,(hl)
		and	24		;calculate bit
		rrc	e
		jr	nc,.setres	;set/reset
		or	64
.setres		or	128+6
		ld	(.lvlsetres+3),a

		;1 V BBB 110
		;res	n,(ix+m)	dd cb mm n*8+#86
		;set	n,(ix+m)	dd cb mm n*8+#c6
.lvlsetres	set	0,(ix+0)	;bit and offset is calculated
		inc	hl
		djnz	.loop3

		ld	a,d
		cpl
		ld	d,a

		dec	c
		jr	nz,.loop2
		ret

decode_level_code
		ld	ix,levelhash
		ld	e,0
		ld	hl,levelhashbits
		ld	c,2
.loop1		ld	d,e
		ld	e,0
		ld	b,7
.loop2		ld	a,(hl)
		and	7
		ld	(.levelbit+2),a	;calculate offset

		ld	a,(hl)
		and	24		;calculate bit
		or	64+6		;bit
		ld	(.levelbit+3),a

		rrc	e
		;01 BBB 110
		;bit	n,(ix+m)	dd cb mm n*8+#46
.levelbit	bit	0,(ix+0)
		jr	z,.setres
		set	6,e
.setres		inc	hl
		djnz	.loop2

		dec	c
		jr	nz,.loop1
		ld	a,e
		cpl
		and	127
		cp	d
		ret	z
		xor	a
		scf
		ret

translate_level_code
		ld	hl,levelhash
		ld	de,levelhashtext2
		ld	b,8
.loop		ld	a,(hl)
		and	15
		add	a,'0'
		cp	'0'+10
		jr	c,.dec
		add	a,'A'-'0'-10
.dec		ld	(de),a
		inc	hl
		inc	de
		djnz	.loop
		ret

get_level_code
		ld	hl,levelhashtmp
		ld	de,levelhashtext2
		ld	b,8
.loop		ld	a,(de)
		cp	'0'
		jr	c,get_level_code_err	; <0,'0')

		cp	'F'+1
		jr	nc,get_level_code_err	; ('F',255>

		cp	'9'+1
		jr	c,.dec			; <'0','9'>

		cp	'A'
		jr	c,get_level_code_err	; ('9','A')

						; <'A','F'>
		sub	7
.dec		sub	'0'
		ld	(hl),a
		inc	hl
		inc	de
		djnz	.loop

		ld	hl,levelhashtmp
		ld	de,levelhash
		ld	bc,8
		ldir
		or	a
		ret

get_level_code_err
		scf
		ret


HASHBIT		macro	b,o
		db	b*8+o
		endm

levelhashbits
		HASHBIT	 0,1
		HASHBIT	 0,6
		HASHBIT	 1,0
		HASHBIT	 3,3
		HASHBIT	 2,5
		HASHBIT	 3,4
		HASHBIT	 0,2

		HASHBIT	 2,6
		HASHBIT	 1,2
		HASHBIT	 1,3
		HASHBIT	 0,7
		HASHBIT	 1,4
		HASHBIT	 2,1
		HASHBIT	 0,0

prepare_info_screen
		ld	a,C_BG_ATTR
		call	cls

		xor	a
		ld	hl,info_text
		ld	b,90
		call	print_text_screen_centered

		ld	hl,#4000
		ld	de,precalcscr
		ld	bc,#1800
		ldir
		ret

info_screen	ld	a,(level+1)
		ld	(tmplevel+1),a

		ld	a,7*8
		call	cls

		call	fadeout

		ld	hl,precalcscr
		ld	de,#4000
		ld	bc,#1800
		ldir

		call	fadein
.wkey		call	get_key
		or	a
		jr	z,.wkey
		jp	play

mute_unmute	ld	a,(music_muted)
		xor	1
		ld	(music_muted),a
		and	1
		ret	z
		call	music_stop
		ret

setup_im2	di

		;prepare im2 table
		ld	hl,im2_vector
		ld	de,im2_vector+1
		ld	bc,256
		ld	(hl),high im2_target
		ldir

		;prepare jump to im2 routine
		ld	a,#C3	;jp
		ld	hl,im2_rut
		ld	(im2_target),a
		ld	(im2_target+1),hl

		;setup I reg
		ld	a,high im2_vector
		ld	i,a

		;and switch to im2
		im	2

		;init music
		call	music_init

		;and enable interrupt
		ei
		ret

im2_rut		push	ix
		push	iy
		push	hl
		push	de
		push	bc
		push	af
		exx
		ex	af,af'
		push	hl
		push	de
		push	bc
		push	af

.counter	ld	a,0
		inc	a
		cp	34
		jr	nz,.setc
		xor	a
.setc		ld	(.counter+1),a
		ld	c,#38
		ld	hl,COLOR_KEYS_PTR
		and	#F0
		jr	z,.isplanshown
		set	6,c
.isplanshown	ld	a,(hl)
		cp	#70
		jr	nz,.testmute
		dec	hl
		ex	hl,de
		xor	a
		ld	h,a
		ld	a,(active_color)
		rrca
		rrca
		ld	l,a
		add	hl,de
		ld	(hl),c

.testmute	ld	a,(music_muted)
		rrca
		jr	c,.muted
		call	music_play

.muted		pop	af
		pop	bc
		pop	de
		pop	hl
		ex	af,af'
		exx
		pop	af
		pop	bc
		pop	de
		pop	hl
		pop	iy
		pop	ix

		ei
		ret


winwin_screen	incbin	"../gfx/win.pak"


		opt push listoff
;;-----------------------------------------------------------------------------
;; Setting for depacker according to compression identification -tXYoAoB

com	=	3	;; Compression type - one from TYPZX7 TYPBLK TYPBS1
pos	=	4	;; Offset coding - one from POSOF4 POSOF1 POSOF2 POSOFD
ofs1	=	3	;; Number of bits for 1st offset - required for POSOF1 POSOF2 POSOF4
ofs2	=	0	;; Number of bits for 2nd offset - required for POSOF2 only

;; This is needed to set according to compression ID string from name of compressed file:
;;  -tXYoAoB ... means setting  com=X, pos=Y, ofs1=A, ofs2=B   (ofs1 ofs2 only when required)

;; Set optimization of depacker
spd	=	2

;; Possible values:
;;  0 ... optimized for code length - short but slow
;;  1 ... compromise between length and speed
;;  2+ .. optimized for speed - but longer code

unpack:		include "lzx.a80"

		include "music.a80"

;;-----------------------------------------------------------------------------
		opt pop


ctrl2direction	= $ - (K_LEFT * 2)
		db	DIRECTION_LEFT, -1
		db	DIRECTION_RIGHT, 1
		db	DIRECTION_DOWN, 8
		db	DIRECTION_UP, -8

enterlevelcodetxt
		db	"Enter code:",0
tmpcode		db	"00000000",0

levelhashtmp	db	"00000000"
levelhash	db	"00000000",0
levelhashtext	db	"Code: "
levelhashtext2	db	"        ",0

txt_nrlevel	db	0,0,0
txt_level	db	"level",0

finlevel_text	db	"AMAZING!",13,"Level complete",0
winwin_text	db	"Congratulations, you've beaten them all!",13
		db	"You've proven an amazing achievement",13
		db	"because you completed all 80 levels.",0

info_text	db	"COLORISTIC",13
		db	"(ZX-Spectrum version)",13
		db	13
		db	"game idea & level design:",13
		db	"Daniel Krautwurst",13
		db	"[coloristic-game.com]",13
		db	13, 13
		db	"code, graphics, music, intro screen:",13
		db	"mborik",13
		db	13
		db	"user interface engine: ub880d",13
		db	"font: Proxima Software & ub880d",13
		db	13
		db	"betatest: ub880d, rombor, solaris104",13
		db	0

xcoord		db	0
ycoord		db	0

active_color	db	0
music_muted	db	0

;;-----------------------------------------------------------------------------

		align	256

sprites		include "sprites.inc"

font		dw	font1
font1		incbin	"../gfx/ladybird.fnt"

@TOTAL_LENGTH = $-ENTRY

		align	256

playground	ds	PLAYFIELD_SIZE
.steps = $ - 4
.current_location = $ - 8

undo_area	ds	PLAYFIELD_SIZE * UNDO_LEVELS

		align	256

im2_vector
im2_target = 256 * (high $ + 1) + (high $ + 1)


precalcscr = #E800


		savebin "coloristic.bin",ENTRY,TOTAL_LENGTH
		savesna "../coloristic.sna",start
